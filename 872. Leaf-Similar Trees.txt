/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    List<Integer> aList = new ArrayList<>();
    int index = 0;
    
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        traverse1(root1);
        return traverse2(root2);
    }
    
    void traverse1(TreeNode root1){
        if(root1 == null) return;
        if(root1.left == null && root1.right == null){
            aList.add(root1.val);
            return;
        }
        traverse1(root1.left);
        traverse1(root1.right);
        return;
    }
    
    boolean traverse2(TreeNode root2){
        boolean checkLeft;
        boolean checkRight;
        
        if(root2 == null) return true;
        if(root2.left == null && root2.right == null){
            if(aList.size() <= index || aList.get(index) != root2.val) return false;
            index++;
            return true;
        }
        checkLeft = traverse2(root2.left);
        checkRight = traverse2(root2.right);
        
        if(checkLeft && checkRight) return true;
        return false;
        
    }
}

/**
[6,7,4,9,8] - aList
 0 1 2 3 4
 
 counter = 0;
 for each time I find null, aList.get(counter) != root.val false;
*/